// index.js –∑ try/catch –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
require('dotenv').config();
const express = require('express');
const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');
const {
  handleStart,
  handleGameAnswer,
  sendMessage,
  getUserDisplay,
  sendPhotoGroup,
  sendQuestion,
  sendResult,
  getUser,
  saveUser,
  updateUser,
  getStoredMessageId,
  sendAfterPaymentMessages,
  sendAfterPaymentFollowup,
  sendStartSubscription,
  markUserAsPending,
  isUserPending,
  removePendingUser,
  isCooldownPassed,
  escapeHTML,
  sendSticker,
  sendPhotoToAdmin,
  approvePayment,
  logError
} = require('./utils');

const app = express();
app.use(express.json());

const TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID;
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

app.post('/', async (req, res) => {
  const data = req.body;
  const msg = data.message || data.callback_query?.message;
  if (!msg || !msg.chat) return res.send('ok');

  const chatId = msg.chat.id;
  const text = data.message?.text;
  const callbackData = data.callback_query?.data;
  const callbackPrefix = callbackData?.split('_')[0];

  // === üîò approve/reject buttons
  if (callbackPrefix === 'approve' || callbackPrefix === 'reject') {
    try {
      const targetChatId = callbackData.split('_')[1];
      const { data: messages } = await supabase.from('admin_messages').select('*');
      const row = messages.find(row => String(row.chat_id) === String(targetChatId));
      const display = await getUserDisplay(targetChatId);

      if (!row) {
        await sendMessage(ADMIN_ID, `‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞ –¥—ñ—è –∞–±–æ –∑–∞–ø–∏—Å —É–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.`);
        return res.send('ok');
      }

      await supabase.from('admin_messages').delete().eq('chat_id', targetChatId);

      if (callbackPrefix === 'approve') {
        await approvePayment(targetChatId);
        await removePendingUser(targetChatId);

        await sendMessage(ADMIN_ID, `‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –¥–ª—è <code>${targetChatId}</code> (${escapeHTML(display)})`, { parse_mode: 'HTML' });

      } else {
        await removePendingUser(targetChatId);
        await sendMessage(targetChatId, '‚õîÔ∏è –°–∫—Ä—ñ–Ω –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–º.');
        await sendMessage(ADMIN_ID, `‚ùå –û–ø–ª–∞—Ç—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>${targetChatId}</code> (${escapeHTML(display)})`, { parse_mode: 'HTML' });

      }

      if (row.message_id) {
        await axios.post(`${TELEGRAM_API}/deleteMessage`, {
          chat_id: ADMIN_ID,
          message_id: row.message_id
        });
      }
    } catch (e) {
      console.error('‚ùå Approve/Reject error:', e);
    }
    return res.send('ok');
  }

  // === üñº –§–û–¢–û
  // if (data.message?.photo) {
  //   try {
  //     const bestPhoto = data.message.photo.at(-1);
  //     const fileId = bestPhoto.file_id;
  //     const name = msg.chat.first_name || "";
  //     const username = msg.chat.username ? `@${msg.chat.username}` : chatId;
  //     const display = name || username;

  //     if (await isUserPending(chatId)) {
  //       await sendPhotoToAdmin(chatId, fileId, display);
  //       await sendMessage(chatId, '‚úÖ –°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.');
  //     } else {
  //       await sendMessage(chatId, '‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ —Ç–∏ —â–µ –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–ª–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –∫—ñ–º–Ω–∞—Ç–∏". –°–ø—Ä–æ–±—É–π —Å–ø–æ—á–∞—Ç–∫—É —ó—ó.');
  //     }
  //   } catch (e) {
  //     console.error('‚ùå Photo error:', e);
  //   }
  //   return res.send('ok');
  // }
  if (data.message?.photo) {
  try {
    const bestPhoto = data.message.photo.at(-1); // –Ω–∞–π—è–∫—ñ—Å–Ω—ñ—à–µ —Ñ–æ—Ç–æ
    const fileId = bestPhoto.file_id;

    await sendMessage(chatId, `üñº –û—Ç—Ä–∏–º–∞–Ω–æ file_id:\n<code>${fileId}</code>`, {
      parse_mode: 'HTML'
    });

  } catch (e) {
    console.error('‚ùå Photo file_id error:', e);
    await sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ üòî');
  }
  return res.send('ok');
}


  // === üé≠ –°—Ç—ñ–∫–µ—Ä–∏
  if (msg.sticker) {
    try {
      const stickerId = msg.sticker.file_id;
      await sendMessage(chatId, `üé≠ –û—Ç—Ä–∏–º–∞–Ω–æ file_id —Å—Ç—ñ–∫–µ—Ä–∞:\n\n<code>${escapeHTML(stickerId)}</code>`, { parse_mode: 'HTML' });
    } catch (e) {
      console.error('‚ùå Sticker error:', e);
    }
    return res.send('ok');
  }

  // === üéß –ê—É–¥—ñ–æ
  if (msg.audio || msg.voice) {
    try {
      const fileId = (msg.audio || msg.voice).file_id;
      await sendMessage(chatId, `üéß –û—Ç—Ä–∏–º–∞–Ω–æ file_id –∑–≤—É–∫—É:\n\n<code>${escapeHTML(fileId)}</code>`, { parse_mode: 'HTML' });
    } catch (e) {
      console.error('‚ùå Audio error:', e);
    }
    return res.send('ok');
  }

  // === üìé PDF
  if (msg.document?.mime_type === 'application/pdf') {
    try {
      const fileId = msg.document.file_id;
      await sendMessage(chatId, `üìé –û—Ç—Ä–∏–º–∞–Ω–æ PDF —Ñ–∞–π–ª!\n\n<code>${escapeHTML(fileId)}</code>`, { parse_mode: 'HTML' });
    } catch (e) {
      console.error('‚ùå PDF error:', e);
    }
    return res.send('ok');
  }

  // === üöÄ /start
  if (text === '/start') {
    try {
      await handleStart(chatId);
    } catch (e) {
      console.error('‚ùå Start error:', e);
    }
    return res.send('ok');
  }

  // === üéØ CALLBACK
  if (callbackData) {
    try {
      if (callbackData === 'start_game') {
        if (!(await isCooldownPassed(chatId, 'start_game', 2))) {
          await sendMessage(chatId, '‚è≥ –ù–µ —Ç–∞–∫ —à–≤–∏–¥–∫–æ');
          return res.send('ok');
        }
        const display = await getUserDisplay(chatId);
        await sendMessage(ADMIN_ID, `üß© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <b>${escapeHTML(display)}</b> —Ä–æ–∑–ø–æ—á–∞–≤ –≥—Ä—É`, {
          parse_mode: 'HTML'
        });

        await saveUser(chatId, 1, []);
        await sendQuestion(chatId, 1);
      }

      if (callbackData.startsWith('answer_')) {
        // if (!(await isCooldownPassed(chatId, callbackData, 3))) {
        //   await sendMessage(chatId, '‚è≥ –ù–µ —Ç–∞–∫ —à–≤–∏–¥–∫–æ');
        //   return res.send('ok');
        // }
        await handleGameAnswer(chatId, callbackData, data);
      }

      if (callbackData === 'after_payment_1') {
        await sendAfterPaymentMessages(chatId);
      }

      if (callbackData === 'start_payment_flow') {
        await sendAfterPaymentFollowup(chatId);
      }

      if (callbackData === 'start_subscription') {
        await markUserAsPending(chatId);
        await sendStartSubscription(chatId);
      }
    } catch (e) {
      console.error('‚ùå Callback error:', e);
    }
    return res.send('ok');
  }

  res.send('ok');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Bot running on port ${PORT}`));
