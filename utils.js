// utils.js
require('dotenv').config();
const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');

const TELEGRAM_API = `https://api.telegram.org/bot${process.env.BOT_TOKEN}`;
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const ADMIN_ID = process.env.ADMIN_ID;

// ==== üì© –ú–ï–°–ï–î–ñ–Ü ====
async function sendMessage(chatId, text, options = {}) {
    const payload = {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
    };
    const res = await axios.post(`${TELEGRAM_API}/sendMessage`, payload);
    return res.data.result.message_id;
}

// async function sendPhotoGroup(chatId, photoIds) {
//     const media = photoIds.map(id => ({ type: 'photo', media: id }));
//     await axios.post(`${TELEGRAM_API}/sendMediaGroup`, {
//         chat_id: chatId,
//         media
//     });
// }

// async function sendSticker(chatId, sticker) {
//     await axios.post(`${TELEGRAM_API}/sendSticker`, { chat_id: chatId, sticker });
// }

async function sendDocument(chatId, fileId) {
    await axios.post(`${TELEGRAM_API}/sendDocument`, {
        chat_id: chatId,
        document: fileId
    });
}

async function sendPhoto(chatId, photoId) {
    try {
        await axios.post(`${TELEGRAM_API}/sendPhoto`, {
            chat_id: chatId,
            photo: photoId,
            parse_mode: 'HTML'
        });
    } catch (error) {
        console.error('‚ùå sendPhoto error:', error);
        await sendMessage(chatId, '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ');
    }
}



async function handleStart(chatId) {
    const { data: welcomeData, error } = await supabase
        .from('welcome')
        .select('*')
        .limit(1)
        .single();

    if (error || !welcomeData) {
        console.error('–ü–æ–º–∏–ª–∫–∞ Supabase:', error?.message || '–ü–æ—Ä–æ–∂–Ω—è —Ç–∞–±–ª–∏—Ü—è');
        await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    const { photo_id, welcome_text_1, welcome_text_2 } = welcomeData;

    if (photo_id) {
        await sendPhoto(chatId, photo_id)
    }

    if (welcome_text_1) {
        await sendMessage(chatId, welcome_text_1);
    }

    if (welcome_text_2) {
        await sendMessage(chatId, welcome_text_2, {
            reply_markup: {
                inline_keyboard: [[{ text: 'üïµÔ∏è‚Äç‚ôÄÔ∏è –î–æ—Å–ª—ñ–¥–∏—Ç–∏ –∞—Ä—Ö–µ—Ç–∏–ø', callback_data: 'start_game' }]]
            }
        });
    }
}

async function handleGameAnswer(chatId, callbackData, data) {
  const [_, answerStr, stepStr] = callbackData.split('_');
  const answer = parseInt(answerStr, 10);
  const questionNumber = parseInt(stepStr, 10); // –Ω–∞–∑–∏–≤–∞—î–º–æ –ª–æ–≥—ñ—á–Ω—ñ—à–µ

  const msgIdFromQuery = data.callback_query.message.message_id;

  // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –¥–æ–º–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∏–π –µ–º–æ–¥–∑—ñ
  const icons = ['üíÑ', 'üß∫', 'üç∑', 'üßÅ', 'ü™¥', 'üë†', 'üßΩ'];
  const icon = icons[Math.floor(Math.random() * icons.length)];

  // –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ Supabase
  const { data: questionData, error: questionError } = await supabase
    .from('questions')
    .select(`answer_${answer}`)
    .eq('question_number', questionNumber)
    .single();

  const answerText = questionData ? questionData[`answer_${answer}`] : `–í–∞—Ä—ñ–∞–Ω—Ç ‚Ññ${answer}`;

  // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É
  await axios.post(`${TELEGRAM_API}/editMessageText`, {
    chat_id: chatId,
    message_id: msgIdFromQuery,
    text: `${icon} –û–±—Ä–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:\n<b>${answerText}</b>`,
    parse_mode: 'HTML',
    reply_markup: { inline_keyboard: [] }
  });

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const { data: userData, error } = await supabase.from('users').select('*').eq('chat_id', chatId).single();
  if (error || !userData || userData.finished || String(userData.message_id) !== String(msgIdFromQuery)) return;

  // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
  let answers = [];
  if (typeof userData.answers === 'string') {
    answers = userData.answers.split(',').map(Number);
  }

  // –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  answers[userData.step - 1] = answer;

  const nextStep = userData.step + 1;
  const finished = nextStep > 7;

  await supabase.from('users').update({
    step: finished ? userData.step : nextStep,
    answers: answers.join(','),
    finished
  }).eq('chat_id', chatId);

  if (finished) {
    await sendMessage(chatId, `üßº ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~`);
    await sendResult(chatId, answers);
  } else {
    await sendQuestion(chatId, nextStep);
  }
}




// ==== üß† –ì–†–ê ====
async function sendQuestion(chatId, number) {
  try {
    const { data, error } = await supabase
      .from('questions')
      .select('*')
      .eq('question_number', number)
      .single();

    if (error || !data) throw new Error('‚ö†Ô∏è –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');

    // 1. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º
    if (data.question_photo_id) {
      await sendPhoto(chatId, data.question_photo_id);
    } else {
      await sendMessage(chatId, '‚ùóÔ∏è –§–æ—Ç–æ –¥–æ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î.');
    }

    // 2. –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–æ–∫)
    const answerButtons = [1, 2, 3, 4, 5]
      .map(i => {
        const answerText = data[`answer_${i}`];
        if (!answerText) return null;
        return [{ text: answerText, callback_data: `answer_${i}_${number}` }];
      })
      .filter(Boolean); // –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —è–∫—ñ—Å—å –ø–æ–ª—è –ø—É—Å—Ç—ñ

    // 3. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    const msgId = await sendMessage(chatId, 'üß† –û–±–µ—Ä–∏ —Ç–æ–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫–∏–π —Ç–æ–±—ñ –Ω–∞–π–±–ª–∏–∂—á–∏–π:', {
      reply_markup: {
        inline_keyboard: answerButtons
      }
    });

    // 4. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id
    await supabase.from('users').update({ message_id: msgId }).eq('chat_id', chatId);

  } catch (e) {
    console.error('‚ùå sendQuestion error:', e.message);
    await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º.');
  }
}


async function sendResult(chatId, answers) {
  // 1. –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞–π—á–∞—Å—Ç—ñ—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  const counts = Array(5).fill(0);
  answers.forEach(a => {
    if (a >= 1 && a <= 5) counts[a - 1]++;
  });

  const max = Math.max(...counts);
  const candidates = counts
    .map((count, i) => (count === max ? i + 1 : null))
    .filter(Boolean);
  const result = candidates[candidates.length - 1]; // –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏—Ö

  // 2. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
  const display = await getUserDisplay(chatId);
  await sendMessage(ADMIN_ID, `üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <b>${escapeHTML(display)}</b> –æ—Ç—Ä–∏–º–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç <b>${result}</b>`, {
    parse_mode: 'HTML'
  });

  // 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑ –±–∞–∑–∏
  const { data, error } = await supabase
    .from('results')
    .select('*')
    .eq('result_number', result)
    .single();

  if (error || !data) {
    await sendMessage(chatId, '‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    return;
  }

  // 4. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
  await sendPhoto(chatId, data.photo_id); // —Ñ–æ—Ç–æ –∑ –∞—Ä—Ö–µ—Ç–∏–ø–æ–º
  await sendMessage(chatId, data.text1);  // —Ç–µ–∫—Å—Ç –∞—Ä—Ö–µ—Ç–∏–ø—É
  await sendDocument(chatId, data.pdf_id); // PDF –∑ —Ä–æ–∑–±–æ—Ä–æ–º

  // 5. Follow-up –æ–¥—Ä–∞–∑—É
  const f = await supabase.from('followup').select('*').limit(1).single();
  if (f.data) {
    await sendMessage(chatId, f.data.message1);
    await sendMessage(chatId, f.data.message2);
  }

  await sendMessage(chatId, '–ê—Ä—Ö–µ—Ç–∏–ø ‚Äî —Ü–µ —Ç—ñ–ª—å–∫–∏ –≤–µ—Ä—à–∏–Ω–∞ –∞–π—Å–±–µ—Ä–≥–∞.\n–°–ø—Ä–∞–≤–∂–Ω—ñ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –ø—ñ—Å–ª—è —Ä–æ–∑–±–æ—Ä—É.\nüí¨ –ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ ‚¨áÔ∏è', {
    reply_markup: {
      inline_keyboard: [[{ text: 'üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ–π —Ä–æ–∑–±—ñ—Ä –∞—Ä—Ö–µ—Ç–∏–ø—É', callback_data: 'after_payment_1' }]]
    }
  });

  // 6. –û—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  await supabase.from('users').delete().eq('chat_id', chatId);
}



// ==== üßæ –ü–Ü–°–õ–Ø –û–ü–õ–ê–¢–ò ====
async function sendAfterPaymentMessages(chatId) {
  const { data, error } = await supabase
    .from('after_payment_1')
    .select('*')
    .order('order');

  if (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase:', error.message);
    await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
    return;
  }

  if (!Array.isArray(data)) {
    console.error('‚ùå –î–∞–Ω—ñ –Ω–µ —î –º–∞—Å–∏–≤–æ–º:', data);
    await sendMessage(chatId, '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
    return;
  }

  for (const row of data) {
    const { type, content, button_text } = row;

    if (!content?.trim()) continue;

    switch (type) {
      case 'text':
        await sendMessage(chatId, content);
        break;

      case 'photo':
        await sendPhoto(chatId, content);
        break;

case 'video':
  if (content.startsWith('BAAC') || content.startsWith('DQAC')) {
    // Telegram file_id ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —è–∫ –∫—Ä—É–∂–µ—á–æ–∫
await axios.post(`${TELEGRAM_API}/sendVideoNote`, {
  chat_id: chatId,
  video_note: content
});

  } else {
    console.warn('‚ö†Ô∏è –¶–µ –Ω–µ file_id –¥–ª—è video_note. –ü–µ—Ä–µ–≤—ñ—Ä Supabase.');
    await sendMessage(chatId, '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–µ—á–æ–∫.');
  }
  break;


      case 'button':
        if (button_text?.trim()) {
          await sendMessage(chatId, content, {
            reply_markup: {
              inline_keyboard: [[
                { text: button_text, callback_data: 'start_subscription' }
              ]]
            }
          });
        } else {
          console.warn('‚ö†Ô∏è button_text –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É button-–±–ª–æ—Ü—ñ:', row);
        }
        break;

      default:
        console.warn('‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É:', row);
        break;
    }
  }
}


async function sendAfterPaymentFollowup(chatId) {
    const { data, error } = await supabase
        .from('after_payment_followup')
        .select('*')
        .order('order');

    if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase (after_payment_followup):', error.message);
        await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    if (!Array.isArray(data)) {
        console.error('‚ùå –î–∞–Ω—ñ –Ω–µ —î –º–∞—Å–∏–≤–æ–º (after_payment_followup):', data);
        await sendMessage(chatId, '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ.');
        return;
    }

    for (const row of data) {
        if (row.type === 'text' && row.content?.trim()) {
            await sendMessage(chatId, row.content);
        }

        if (row.type === 'button' && row.content?.trim() && row.button_text?.trim()) {
            await sendMessage(chatId, row.content, {
                reply_markup: {
                    inline_keyboard: [[{
                        text: row.button_text,
                        callback_data: 'start_payment_flow' // üëà —Ç–≤—ñ–π –Ω–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª
                    }]]
                }
            });
        }
    }
}

async function approvePayment(chatId) {
    // 1Ô∏è‚É£ –î–æ–¥–∞—î–º–æ —É —Ç–∞–±–ª–∏—Ü—é paid_users
    await supabase.from('paid_users').insert({ id: chatId });

    // 2Ô∏è‚É£ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é
    await sendMessage(chatId, '‚ú® –í—Å–µ –∑—ñ–π—à–ª–æ—Å—è! –°–∫–æ—Ä–æ –±—É–¥–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ‚Äî —á–µ–∫–∞–π –º—ñ–π –º–µ—Å–µ–¥–∂ üí¨', 
    //     {
    //     reply_markup: {
    //         inline_keyboard: [[
    //             { text: 'üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥—É –∫—ñ–º–Ω–∞—Ç—É –≥—Ä–∏', url: 'https://t.me/+9me2lhd12t00MGEy' }
    //         ]]
    //     }
    // }
);
}

// async function safeSendMessage(chatId, text, options = {}) {
//     try {
//         return await sendMessage(chatId, text, options);
//     } catch (e) {
//         console.error('sendMessage error:', e?.response?.data || e.message);
//     }
// }

async function getUserDisplay(chatId) {
    try {
        const { data: userData } = await axios.get(`${TELEGRAM_API}/getChat?chat_id=${chatId}`);
        const firstName = userData?.result?.first_name || '';
        const username = userData?.result?.username ? `@${userData.result.username}` : '';
        return `${firstName} ${username}`.trim();
    } catch (e) {
        console.error('‚ùå getUserDisplay error:', e?.response?.data || e.message);
        return chatId.toString(); // fallback
    }
}


async function sendStartSubscription(chatId) {
    await markUserAsPending(chatId);

    const { data, error } = await supabase
        .from('after_payment_followup') // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
        .select('*')
        .order('order');

    const display = await getUserDisplay(chatId);
    await sendMessage(ADMIN_ID, `üí≥ –ö–ª—ñ—î–Ω—Ç <b>${escapeHTML(display)}</b> –ø–µ—Ä–µ–π—à–æ–≤ –¥–æ –æ–ø–ª–∞—Ç–∏`, {
        parse_mode: 'HTML'
    });

    if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase (sendStartSubscription):', error.message);
        await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    if (!Array.isArray(data)) {
        console.error('‚ùå –î–∞–Ω—ñ –Ω–µ –º–∞—Å–∏–≤ (sendStartSubscription):', data);
        await sendMessage(chatId, '‚ö†Ô∏è –î–∞–Ω—ñ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    for (const row of data) {
        if (row.type === 'text' && row.content?.trim()) {
            await sendMessage(chatId, row.content);
        }

        if (row.type === 'button' && row.content?.trim() && row.button_text?.trim()) {
            await sendMessage(chatId, row.content, {
                reply_markup: {
                    inline_keyboard: [[{
                        text: row.button_text,
                        callback_data: 'next_logic' // üîÅ –º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é
                    }]]
                }
            });
        }
    }
}

async function sendPhotoToAdmin(chatId, fileId, displayName) {
    const caption = `üì∏ –ù–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥ <b>${escapeHTML(displayName)}</b>\n<code>${chatId}</code>`;

    const response = await axios.post(`${TELEGRAM_API}/sendPhoto`, {
        chat_id: ADMIN_ID,
        photo: fileId,
        caption: caption,
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [[
                { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `approve_${chatId}` },
                { text: '‚õîÔ∏è –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_${chatId}` }
            ]]
        }
    });

    const messageId = response.data.result.message_id;

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
    await supabase.from('admin_messages').insert({
        chat_id: chatId,
        message_id: messageId
    });
}



// ==== üë§ –ö–û–†–ò–°–¢–£–í–ê–ß ====
async function getUser(chatId) {
    const { data } = await supabase.from('users').select('*').eq('chat_id', chatId).single();
    if (!data) return { step: 1, answers: [] };
    const answers = data.answers?.split(',').map(n => parseInt(n)).filter(n => !isNaN(n)) || [];
    return { step: data.step, answers, finished: data.finished };
}

async function saveUser(chatId, step, answers) {
    await supabase.from('users').upsert({
        chat_id: chatId,
        step,
        answers: answers.join(','),
        finished: false
    }, {
        onConflict: ['chat_id'],
        ignoreDuplicates: true // üëà –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ù–ï –±—É–¥–µ, —è–∫—â–æ –∑–∞–ø–∏—Å –≤–∂–µ —î
    });
}


async function updateUser(chatId, step, answers, finished = false) {
    await supabase.from('users').upsert({
        chat_id: chatId,
        step,
        answers: answers.join(','),
        finished
    }, { onConflict: ['chat_id'] });
}


async function getStoredMessageId(chatId) {
    const { data } = await supabase.from('users').select('message_id').eq('chat_id', chatId).single();
    return data?.message_id || null;
}

// ==== –ü–Ü–î–ü–ò–°–ö–ê ====
async function markUserAsPending(chatId) {
  const { data } = await supabase.from('pending').select('chat_id').eq('chat_id', chatId);

  if (!data?.length) {
    const { error } = await supabase.from('pending').insert({
      chat_id: chatId,
      date: new Date().toISOString() // –¥–æ–¥–∞—î–º–æ –¥–∞—Ç—É —è–≤–Ω–æ
    });

    if (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ –≤ pending:', error.message);
    }
  }
}


async function isUserPending(chatId) {
    const { data } = await supabase.from('pending').select('*').eq('chat_id', chatId);
    return !!data?.length;
}

async function removePendingUser(chatId) {
    await supabase.from('pending').delete().eq('chat_id', chatId);
}

// ==== COOL DOWN ====
async function isCooldownPassed(chatId, action, cooldownSeconds) {
    const now = Date.now();
    const { data } = await supabase.from('cooldown').select('*').eq('chat_id', chatId).eq('action', action).maybeSingle();
    if (data) {
        const last = new Date(data.timestamp).getTime();
        if ((now - last) / 1000 < cooldownSeconds) return false;
        await supabase.from('cooldown').update({ timestamp: new Date().toISOString() }).eq('chat_id', chatId).eq('action', action);
        return true;
    } else {
        await supabase.from('cooldown').insert({ chat_id: chatId, action, timestamp: new Date().toISOString() });
        return true;
    }
}

// ==== HELPERS ====
function escapeHTML(text) {
    return String(text)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/`/g, '&#96;');
}

module.exports = {
    sendMessage,
    // sendPhotoGroup,
    sendQuestion,
    sendResult,
    getUser,
    saveUser,
    updateUser,
    getStoredMessageId,
    sendAfterPaymentMessages,
    sendStartSubscription,
    markUserAsPending,
    isUserPending,
    removePendingUser,
    isCooldownPassed,
    // safeSendMessage,
    escapeHTML,
    // sendSticker,
    handleGameAnswer,
    getUserDisplay,
    sendPhotoToAdmin,
    approvePayment,
    sendAfterPaymentFollowup,
    handleStart
};
